/* -------------------------------- */
/*            Variables             */
/* -------------------------------- */

:root {
  --bg-black: #101016;
  --text-color: #e7e7e7;

  --hexagon-size: 100px;
}

/* -------------------------------- */
/*            Base setup            */
/* -------------------------------- */

/* Box sizing */
*,
*::before,
*::after {
  box-sizing: border-box;
}

html,
body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

/* -------------------------------- */
/*              Reset               */
/* -------------------------------- */

/* Reset margins */
h1,
h2,
h3,
h4,
h5,
h6,
p,
figure,
picture {
  margin: 0;
}

/* Make images easier to work with */
img,
picture {
  display: block;
  max-width: 100%;
}

/* Make form elements easier to work with */
input,
button,
textarea,
select {
  font: inherit;
}

/* Make lists easier to work with */
ul,
li {
  padding: 0;
  margin: 0;
  list-style: none;
}

/* -------------------------------- */
/*          Global styling          */
/* -------------------------------- */

body {
  font-family: 'Roboto Mono', monospace;
  background: var(--bg-black);
  color: var(--text-color);

  position: relative;
}

.section-container {
  height: 100%;
  overflow-y: scroll;
  overflow-x: hidden;
  scroll-snap-type: y mandatory;
  scroll-behavior: smooth;
}

.section {
  height: 100vh;
  width: 100%;
  scroll-snap-align: start;
  overflow: hidden;
}
.section:not(:last-child) {
  border-bottom: 1px solid rgba(255, 255, 255, 0.5);
}

/* -------------------------------- */
/*         Specific styling         */
/* -------------------------------- */

/* ---------- infite-well --------- */

#infite-well {
  .hexagon-container {
    transform: translate(calc(var(--hexagon-size) / 6 * -1), calc(var(--hexagon-size) / 3 * -1));
  }

  .hexagon-row {
    display: flex;
  }

  $hexagonGapInit: calc(var(--hexagon-size) / 6 * -1);
  $shiftLeft: calc(var(--hexagon-size) / 2 * -1);
  $n: 12;
  @for $i from 1 through $n {
    .hexagon-row:nth-child(#{$i}) {
      // Even rows should be moved to the left half a hexagon
      @if $i % 2 == 0 {
        transform: translateY(calc($hexagonGapInit * $i)) translateX($shiftLeft);
      } @else {
        transform: translateY(calc($hexagonGapInit * $i));
      }
    }
  }

  .hexagon {
    display: inline-block;
    min-width: var(--hexagon-size);
    min-height: var(--hexagon-size);
    clip-path: polygon(50% 0%, 95% 25%, 95% 75%, 50% 100%, 5% 75%, 5% 25%);
    background: goldenrod;

    &--empty {
      @extend .hexagon;
      background: none;
    }
  }
}

#fancy-cards {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;

  $aspect-ratio: 1.4;
  $corner-cutoff: 12%;
  $corner-other: calc($corner-cutoff / $aspect-ratio);
  $corners-off: polygon(
    $corner-cutoff 0,
    0 $corner-other,
    0% calc(100% - $corner-other),
    $corner-cutoff 100%,
    calc(100% - $corner-cutoff) 100%,
    100% calc(100% - $corner-other),
    100% $corner-other,
    calc(100% - $corner-cutoff) 0
  );

  .left {
    --color-bg: rgba(255, 0, 255, 1);
    --color-border: green;
    --rotation: rotate(-8deg) translateX(-35%) translateY(15%);
  }
  .middle {
    --color-bg: rgba(255, 86, 170, 1);
    --color-border: rgb(204, 255, 21);
    --rotation: '';
  }
  .right {
    --color-bg: rgba(72, 255, 237, 1);
    --color-border: blue;
    --rotation: rotate(8deg) translateX(35%) translateY(15%);
  }

  .card-wrapper-triangles {
    position: relative;
    transform: var(--rotation);

    .card-wrapper-borders {
      position: relative;
      padding: 3px;
      $corner-cutoff: 10%;
      background: transparent;
      clip-path: $corners-off;

      .corner-box {
        $size: 75px;
        position: absolute;
        min-width: $size;
        height: $size;
        background: var(--color-border);

        &--top-left {
          @extend .corner-box;
          top: 0;
          left: 0;
        }
        &--top-right {
          @extend .corner-box;
          top: 0;
          right: 0;
        }
        &--bottom-left {
          @extend .corner-box;
          bottom: 0;
          left: 0;
        }
        &--bottom-right {
          @extend .corner-box;
          bottom: 0;
          right: 0;
        }
      }

      // .deg-45 {
      //   position: absolute;
      //   top: 28px;
      //   left: -42px;
      //   width: 100px;
      //   z-index: 5;
      //   height: 8px;
      //   background: red;
      //   transform: rotate(-45deg);
      // }
    }

    .card {
      min-width: 350px;
      aspect-ratio: calc(1 / $aspect-ratio);
      position: relative;
      background: var(--color-bg);
      clip-path: $corners-off;
    }
  }
}
